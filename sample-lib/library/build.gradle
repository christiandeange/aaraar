import org.jetbrains.annotations.NotNull
import sh.christian.aaraar.gradle.ApiJarProcessor
import sh.christian.aaraar.model.AarArchive
import sh.christian.aaraar.model.classeditor.Classpath

plugins {
  id "com.android.library"
  id "org.jetbrains.kotlin.android"
  id "sh.christian.aaraar" version "0.0.14"
  id "maven-publish"
}

group = "sh.christian.samplelib"
version = "1.0.0"

android {
  namespace "sh.christian.samplelib"
  compileSdk 33

  defaultConfig {
    minSdk 24
    consumerProguardFiles "consumer-rules.pro"
  }

  buildTypes {
    release {
      minifyEnabled false
    }

    publish {
      initWith release
      matchingFallbacks = ["release"]
    }
  }

  packagingOptions {
    resources.excludes += "**/module-info.class"
    resources.excludes += "exclude-me.txt"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = "11"
  }

  publishing {
    singleVariant("publish") {
      withSourcesJar()
    }
  }
}

dependencies {
  api "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"

  compileOnly project(":helper-library")
  embed project(":helper-library")

  implementation "androidx.core:core-ktx:1.9.0"
  implementation "androidx.appcompat:appcompat:1.6.0"
  implementation "com.google.android.material:material:1.7.0"

  compileOnly "io.reactivex.rxjava3:rxjava:3.1.5"
  embed "io.reactivex.rxjava3:rxjava:3.1.5"

  embed fileTree(dir: "libs", include: ["*.jar"])
}

aaraar {
  shading {
    createRule([forProject(path), forFiles(fileTree(dir: "libs"))]) {
      it.rename "org.intellij.lang.annotations.**", "shaded.@0"
      it.rename "org.jetbrains.annotations.**", "shaded.@0"
    }

    createRule {
      it.rename "io.reactivex.rxjava3.**", "shaded.@0"
    }

    createRule {
      it.rename "sh.christian.samplelib.ContextsKt", "sh.christian.samplelib.MyAppPackage"
      it.delete "sh.christian.helperlib.SecretsKt"
    }
  }

  isEnabledForVariant { variant ->
    variant.name == "publish"
  }

  keepMetaFiles = false

  setApiJarProcessorFactory(new MyApiJarProcessorFactory())
}

afterEvaluate {
  publishing {
    publications {
      maven(MavenPublication) {
        from components.publish
      }
    }
  }
}

class MyApiJarProcessor extends ApiJarProcessor {
  @Override
  void processClasspath(@NotNull AarArchive aarArchive, @NotNull Classpath classpath) {
    // Remove internal class
    classpath.removeClass("sh.christian.samplelib.FooInternal")

    // Remove internal method on public class
    def fooClass = classpath.get("sh.christian.samplelib.Foo")
    fooClass.methods = fooClass.methods.findAll { !it.name.containsIgnoreCase("internal") }
  }
}

class MyApiJarProcessorFactory implements ApiJarProcessor.Factory {
  @Override
  ApiJarProcessor create() {
    return new MyApiJarProcessor()
  }
}
